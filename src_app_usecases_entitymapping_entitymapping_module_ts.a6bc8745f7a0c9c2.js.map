{"version":3,"file":"src_app_usecases_entitymapping_entitymapping_module_ts.a6bc8745f7a0c9c2.js","mappings":"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","sources":["./src/app/usecases/entitymapping/entitymapping.module.ts","./src/app/usecases/entitymapping/entitymapping.routing.ts","./src/app/usecases/entitymapping/model/EntityMappingUsecaseModel.ts","./src/app/usecases/entitymapping/views/AnnotationsView.ts","./src/app/usecases/entitymapping/views/AnnotationsView.html","./src/app/usecases/entitymapping/views/CustomAnnotationsView.ts","./src/app/usecases/entitymapping/views/CustomAnnotationsView.html","./src/app/usecases/entitymapping/views/EntityMappingView.ts","./src/app/usecases/entitymapping/views/EntityMappingView.html","./src/app/usecases/entitymapping/views/ReverseMappingView.ts","./src/app/usecases/entitymapping/views/ReverseMappingView.html"],"sourcesContent":["import {NgModule} from '@angular/core'\r\nimport {CommonModule} from '@angular/common';\r\nimport {LocalRouting} from \"./entitymapping.routing\";\r\nimport {EntityMappingUsecaseModel} from \"./model/EntityMappingUsecaseModel\";\r\nimport {SharedModule} from \"../../app.shared.modules\";\r\nimport {AgGridModule} from \"@ag-grid-community/angular\";\r\nimport {EntityMappingView} from \"./views/EntityMappingView\";\r\nimport {AnnotationsView} from \"./views/AnnotationsView\";\r\nimport {CustomAnnotationsView} from \"./views/CustomAnnotationsView\";\r\nimport {ReverseMappingView} from \"./views/ReverseMappingView\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    LocalRouting,\r\n    SharedModule,\r\n    AgGridModule,\r\n  ],\r\n  declarations: [\r\n    // views\r\n    EntityMappingView,\r\n    AnnotationsView,\r\n    CustomAnnotationsView,\r\n    ReverseMappingView\r\n  ],\r\n  providers: [\r\n    EntityMappingUsecaseModel\r\n  ],\r\n  exports: []\r\n})\r\nexport class EntityMappingModule {\r\n}\r\n","import {RouterModule, Routes} from \"@angular/router\";\r\nimport {ModuleWithProviders} from \"@angular/core\";\r\nimport {EntityMappingView} from \"./views/EntityMappingView\";\r\nimport {EntityMappingModule} from \"./entitymapping.module\";\r\nimport {AnnotationsView} from \"./views/AnnotationsView\";\r\nimport {CustomAnnotationsView} from \"./views/CustomAnnotationsView\";\r\nimport {ReverseMappingView} from \"./views/ReverseMappingView\";\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: EntityMappingView },\r\n  { path: 'annotations', component: AnnotationsView },\r\n  { path: 'customAnnotations', component: CustomAnnotationsView },\r\n  { path: 'reverseMapping', component: ReverseMappingView },\r\n];\r\n\r\nexport const LocalRouting: ModuleWithProviders<EntityMappingModule> = RouterModule.forChild(routes);\r\n","import {BaseUsecaseModel, ErrorHelper} from \"@six-group/base-angular-framework/core\";\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class EntityMappingUsecaseModel extends BaseUsecaseModel {\r\n\r\n  constructor(private errorHelper: ErrorHelper) {\r\n    super();\r\n  }\r\n\r\n  destroy(): void {\r\n  }\r\n\r\n  handleInitializionError(err: any): void {\r\n    this.errorHelper.displayError(err);\r\n  }\r\n\r\n  hookObservables(): void {\r\n  }\r\n\r\n\r\n}\r\n","import {AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {BaseView} from \"@six-group/base-angular-framework/core\";\r\n\r\n@Component({\r\n  selector: 'AnnotationsView',\r\n  templateUrl: './AnnotationsView.html',\r\n  providers: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AnnotationsView extends BaseView implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  public exampleCode = `import {UnixDate} from \"@six-group/base-angular-framework/core/DecoratorsModule\";\r\n\r\nexport class CalendarDay extends BaseEntity<CalendarDay> {\r\n\r\n  @UnixDate()\r\n  date: Date = null;\r\n\r\n  getClassName(): string {\r\n    return \"CalendarDay\";\r\n  }\r\n}`;\r\n\r\n  public tableData = [\r\n    { name: \"ISODate\", usage: \"@ISODate() property: Date\", attributes: \"None\", description: \"Converts an ISO Date into a Date object\", other: \"\", example: \"@ISODate() isoDate: Date = undefined;\"},\r\n    { name: \"UnixDate\", usage: \"@UnixDate() property:Date\", attributes: \"None\", description: \"Converts a UNIX \\\"number\\\" into a Date object\", other: \"\", example: \"@UnixDate() uxDate: Date = undefined;\"},\r\n    { name: \"GeneratedId\", usage: \"@GeneratedId() property: String\", attributes: \"None\", description: \"Creates a unique generated ID for every creation of a class using this annotation\", other: \"The id uses numbers that ever increase starting at 0\", example: \"@GeneratedId() _id: String = undefined;\"},\r\n    { name: \"FormattedDate\", usage: \"@FormattedDate(dateFormat)\", attributes: \"Date Format\", description: \"Takes a string date representing the target format and converts it to a Date\", other: \"\", example: \"@FormattedDate('YYYY-MM-DD') ymdDate: Date = undefined;\"},\r\n    { name: \"ListDecorator\", usage: \"@List(\\\"TargetClass\\\") property:T[]\", attributes: \"Target Class\", description: \"Assumes the property is a list of classes of the type given in the argument (matches getClassName() on BaseEntity)\", other: \"\", example: \"@List(\\\"MyClass\\\") myClasses: MyClass[] = undefined;\"},\r\n    { name: \"ObjectMapping\", usage: \"@ObjectMapping(\\\"TargetClass\\\") property:Clazz\", attributes: \"Target Class\", description: \"Assumes the property is a single object of the type given in the argument (matches getClassName() on BaseEntity)\", other: \"\", example: \"@ObjectMapping(\\\"OtherClass\\\") otherObj: OtherClass = undefined;\"},\r\n    { name: \"StandardList\", usage: \"@StandardList() property:baseType[]\\t\", attributes: \"None\", description: \"Assumes the property is a list of a standard type, such as string, integer, etc\", other: \"\", example: \"@StandardList() listOfStrings: String[] = undefined;\"},\r\n    { name: \"ConvertToInt\", usage: \"@ConvertToInt() property:number\\t\", attributes: \"None\", description: \"Converts the target to an integer (JS number)\", other: \"\", example: \"@ConvertToInt() intValueOfStr: value = undefined;\"},\r\n    { name: \"ConvertToFloat\", usage: \"@ConvertToFloat() property:number\", attributes: \"None\", description: \"Converts the target to a float (JS number with decimals)\", other: \"\", example: \"@ConvertToFloat() floatValueOfStr: value = undefined;\"}\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getEventGrid(id: string): any {\r\n  }\r\n\r\n  hookObservables(): void {\r\n\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  override ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"documentParent\" xmlns=\"http://www.w3.org/1999/html\">\r\n  <div class=\"document\">\r\n    <h1>Annotations and Decorators</h1>\r\n\r\n    <div class=\"description\">Annotations on properties in your entities defines how the raw json properties are converted into real objects. For the most general usecases of mapping data (for example strings into Date objects), many annotations are provided by the framework.</div>\r\n\r\n    <div class=\"description\">Example of annotation usage where a string UNIX date would be converted into a JS Date Object</div>\r\n    <pre><code [highlight]=\"exampleCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n\r\n    <p></p>\r\n    <div class=\"description\">Here are the annotations that are in the framework already. If you need to convert things that are not covered here, please go on to the next section in the menu</div>\r\n    <p></p>\r\n\r\n    <h2>Provided Annotations</h2>\r\n    <table class=\"doc-table\">\r\n      <thead>\r\n      <tr>\r\n        <th> name</th>\r\n        <th> usage</th>\r\n        <th> attributes</th>\r\n        <th> description</th>\r\n        <th> other info</th>\r\n        <th> example code</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr *ngFor=\"let item of tableData\">\r\n        <td><span class=\"doc-option-name\" id=\"api.menu.props.model\">{{ item.name }}<a class=\"doc-option-link\"><i class=\"pi pi-link\"></i></a></span></td>\r\n        <td><span class=\"doc-option-type\">{{ item.usage }}</span></td>\r\n        <td><span id=\"api.menu.props.attributes\" class=\"doc-option-light doc-option-default\">{{ item.attributes }}</span></td>\r\n        <td><span id=\"api.menu.props.description\" class=\"doc-option-description\">{{ item.description }}</span></td>\r\n        <td><span id=\"api.menu.props.other\" class=\"doc-option-description\">{{ item.other }}</span></td>\r\n        <td><span id=\"api.menu.props.example\" class=\"doc-option-description\"><pre><code [highlight]=\"item.example\"\r\n                                                                                        language=\"ts\"></code></pre></span></td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n  </div>\r\n</div>\r\n","import {AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {BaseView} from \"@six-group/base-angular-framework/core\";\r\n\r\n@Component({\r\n  selector: 'CustomAnnotationsView',\r\n  templateUrl: './CustomAnnotationsView.html',\r\n  providers: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomAnnotationsView extends BaseView implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  public constuctorCode = `import {DecoratorRegistry} from \"@six-group/base-angular-framework/core\";\r\n\r\n...\r\n\r\nconstructor(private decoratorRegistry: DecoratorRegistry) {`\r\n\r\n  public sampleUsageCode = `import {BaseEntity} from \"@six-group/base-angular-framework/core\";\r\nimport {Test} from \"./TestDecorator\";\r\n\r\nexport class TestClass implements BaseEntity<TestClass> {\r\n\r\n  @Test()\r\n  prop: string = null;\r\n\r\n  getClassName(): string {\r\n    return \"TestClass\";\r\n  }\r\n\r\n  postProcess() {\r\n  }\r\n}`;\r\n\r\n  public sampleRegistrationCode = `import {getTest, Test} from \"./test/data/decorators/TestDecorator\";\r\n\r\n...\r\n\r\nngOnInit() {\r\n    try {\r\n      this.decoratorRegistry.register(Test, getTest, (prop, val, params) => {\r\n        if (params) {\r\n          return params;\r\n        }\r\n        return \"It worked!\";\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n}`;\r\n\r\n  public sampleAnnotationCode = `import \"reflect-metadata\";\r\n\r\nconst decoratorMetadataKey = Symbol(\"Test\");\r\n\r\nexport function Test(formatString: string = null) {\r\n  return Reflect.metadata(decoratorMetadataKey, formatString);\r\n}\r\n\r\nexport function getTest(target: any, propertyKey: string) {\r\n  return Reflect.getMetadata(decoratorMetadataKey, target, propertyKey);\r\n}`;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getEventGrid(id: string): any {\r\n  }\r\n\r\n  hookObservables(): void {\r\n\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  override ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"documentParent\" xmlns=\"http://www.w3.org/1999/html\">\r\n  <div class=\"document\">\r\n    <h1>Custom Annotations and the DecoratorRegistry</h1>\r\n\r\n    <p class=\"description\">When the provided annotations are not enough, creating your own is the way to go. An annotation in Javscript is essentially a <i>Decorator</i> and is created by quite specific code. This section will go over creating your own and registering them with the <i>EntityMapper</i>.</p>\r\n\r\n    <h2>Sample Annotation (Decorator) named <i>&#64;Test</i></h2>\r\n    <pre><code [highlight]=\"sampleAnnotationCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <h2>DecoratorRegistry</h2>\r\n    <p class=\"description\">All annotation registration (so that the <i>EntityMapper</i> is aware of your custom annotation) is done via the <i>DecoratorRegistry</i> service. First, inject the <i>DecoratorRegistry</i> in your constructor as as follows:\r\n\r\n    <pre><code [highlight]=\"constuctorCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n\r\n    <p class=\"description\">We then register the annotation to it via:</p>\r\n    <pre><code [highlight]=\"sampleRegistrationCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n\r\n    <p class=\"description\">Once it's registered, we can add it to our entity class where we wish to use it:</p>\r\n    <pre><code [highlight]=\"sampleUsageCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <p class=\"description\">In this test case, the annotation would per the above code do the following:</p>\r\n    <ol type=\"1\">\r\n      <li><p class=\"description\">If there is a parameter passed along with the <i>&#64;Test()</i> annotation, such as <i>&#64;Test('Hi there!')</i>, then the value of \"prop\" will be \"Hi there!\"</p></li>\r\n      <li><p class=\"description\">If there is no parameter passed along with the <i>&#64;Test()</i> annotation, then the value is \"It worked!\"</p></li>\r\n    </ol>\r\n\r\n\r\n\r\n  </div>\r\n</div>\r\n","import {AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {BaseView} from \"@six-group/base-angular-framework/core\";\r\n\r\n@Component({\r\n  selector: 'EntityMappingView',\r\n  templateUrl: './EntityMappingView.html',\r\n  providers: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EntityMappingView extends BaseView implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  public easyRestCode = `let data:clazz[] = entityDataService.fetchData<TargetClazz>(\"http://server:8000/rest/fetch/data\", true);`;\r\n\r\n  public mavenExampleCode = `<plugin>\r\n  <artifactId>maven-antrun-plugin</artifactId>\r\n  <executions>\r\n    <execution>\r\n      <id>replace1</id>\r\n      <phase>generate-resources</phase>\r\n      <configuration>\r\n        <tasks>\r\n          <echo>====================================</echo>\r\n          <echo>= EXECUTING REPLACEMENT TASKS =</echo>\r\n          <echo>====================================</echo>\r\n          <echo>-> Project Base Dir: \\${project.basedir}</echo>\r\n          <echo>- Running Array fix on \\${project.basedir}/src/app/model/entities</echo>\r\n          <replace token=\"Array = undefined\" value=\"Array<any> = undefined\" dir=\"\\${project.basedir}/src/app/model/entities\">\r\n            <include name=\"**/*.ts\"/>\r\n          </replace>\r\n          <echo>- Running Bad REST path fix on \\${project.basedir}/src/app/model/entities</echo>\r\n          <replace token=\"/rno/referencedata/\" value=\"/rno/backend/referencedata/\" dir=\"\\${project.basedir}/src/app/model/api\">\r\n            <include name=\"**/*.ts\"/>\r\n          </replace>\r\n          <echo>- Running 2nd Bad REST path fix on \\${project.basedir}/src/app/model/entities</echo>\r\n          <replace token=\"/rno/obe/\" value=\"/rno/backend/obe/\" dir=\"\\${project.basedir}/src/app/model/api\">\r\n            <include name=\"**/*.ts\"/>\r\n          </replace>\r\n          <echo>- Running Primitive Return Type Replacements on \\${project.basedir}/src/app/model/entities</echo>\r\n          <replace token=\"), boolean, 'boolean'); // RETURN-TYPE-MARKER\" value=\"), undefined, 'boolean'); // RETURN-TYPE-MARKER\" dir=\"\\${project.basedir}/src/app/model/api\">\r\n            <include name=\"**/*.ts\"/>\r\n          </replace>\r\n          <replace token=\"), string, 'string'); // RETURN-TYPE-MARKER\" value=\"), undefined, 'string'); // RETURN-TYPE-MARKER\" dir=\"\\${project.basedir}/src/app/model/api\">\r\n            <include name=\"**/*.ts\"/>\r\n          </replace>\r\n          <echo>====================================</echo>\r\n          <echo>Annotation Propagation Task Up Ahead</echo>\r\n          <echo>====================================</echo>\r\n        </tasks>\r\n      </configuration>\r\n      <goals>\r\n        <goal>run</goal>\r\n      </goals>\r\n    </execution>\r\n  </executions>\r\n</plugin>\r\n  <!-- Inject annotations into all entities that are of type Date, etc -->\r\n<plugin>\r\n<groupId>com.google.code.maven-replacer-plugin</groupId>\r\n<artifactId>replacer</artifactId>\r\n<version>1.5.3</version>\r\n<executions>\r\n  <execution>\r\n    <phase>generate-resources</phase>\r\n    <goals>\r\n      <goal>replace</goal>\r\n    </goals>\r\n  </execution>\r\n</executions>\r\n<configuration>\r\n  <basedir>\\${project.basedir}/src/app/model/entities</basedir>\r\n  <includes>\r\n    <include>**/*.ts</include>\r\n  </includes>\r\n  <regexFlags>\r\n    <regexFlag>CASE_INSENSITIVE</regexFlag>\r\n    <regexFlag>MULTILINE</regexFlag>\r\n  </regexFlags>\r\n  <replacements>\r\n    <replacement>\r\n      <!-- annotate all Date properties with @DateProp -->\r\n      <token>((.*: Date) =.*)</token>\r\n      <value>\\\\@DateProp\\\\(\\\\)\r\n        $1\r\n      </value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- annotate executionTime string with a microseconds prop -->\r\n      <token>((.*\\\\sexecutionTime: string) =.*)</token>\r\n      <value>\\\\@StringDateWithMicrosProp\\\\(\\\\)\r\n        $1\r\n      </value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- annotate transactionTime string with a microseconds prop -->\r\n      <token>((.*\\\\stransactionTime: string) =.*)</token>\r\n      <value>\\\\@StringDateWithMicrosProp\\\\(\\\\)\r\n        $1\r\n      </value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- replace the type of execution time to MicrosecondDate -->\r\n      <token>\\\\sexecutionTime: string</token>\r\n      <value>executionTime: MicrosecondDate</value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- replace the type of transaction time to MicrosecondDate -->\r\n      <token>\\\\stransactionTime: string</token>\r\n      <value>transactionTime: MicrosecondDate</value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- Remove bad generation. Enums aren't recognized as they're declared as types -->\r\n      <token>@ObjectMapping\\\\('.*Enum.*'\\\\)</token>\r\n      <value></value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- Remove bad generation. Array<> ends up in the list -->\r\n      <token>@List\\\\('Array.{4}(.*).{4}'\\\\)</token>\r\n      <value>@List('$1')</value>\r\n    </replacement>\r\n    <replacement>\r\n      <!-- MUST BE LAST OR YOU WILL HAVE DOUBLE ANNOTATIONS. Annotate all Time strings with a StringDateProp -->\r\n      <token>((.*Time: string) =.*)</token>\r\n      <value>\\\\@StringDateProp\\\\(\\\\)\r\n        $1\r\n      </value>\r\n    </replacement>\r\n  </replacements>\r\n</configuration>\r\n</plugin>`;\r\n\r\n  public currencyMappingCode = `let allCurrencies:Currency[] = [];\r\n\r\njsonObj.currencies.forEach((ele) => {\r\n    let cur:Currency = null;\r\n    EntityMapper.mapEntityTreeFrom(ele, cur, Currency, entityDataService);\r\n    allCurrencies.push(cur)\r\n});`;\r\n\r\n  public currencyCode = `{\r\n    currencies: [\r\n        { code: \"CHF\", name: \"Swiss Francs\" },\r\n        { code: \"EUR\", name: \"Euros\" }\r\n    ]\r\n}`;\r\n\r\n  public goodInitCode = `export class {\r\n    name: string = undefined;\r\n}`;\r\n\r\n  public badInitCode = `export class {\r\n    name: string;\r\n}`;\r\n\r\n  public baseEntityCode = `import {BaseEntity} from \"@six-group/base-angular-framework/core\";\r\n\r\nexport class Currency implements BaseEntity<Currency> {\r\n\r\n  _id: string = null;\r\n\r\n  name: string = null;\r\n  code: string = null;\r\n  exchangeRateCHF: number = null;\r\n\r\n  override getClassName(): string {\r\n    return \"Currency\";\r\n  }\r\n\r\n  override postProcess() {\r\n    this._id = this.name + this.code;\r\n  }\r\n}`;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getEventGrid(id: string): any {\r\n  }\r\n\r\n  hookObservables(): void {\r\n\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  override ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"documentParent\" xmlns=\"http://www.w3.org/1999/html\">\r\n  <div class=\"document\">\r\n    <h1>Entity Mapping</h1>\r\n\r\n    <h2>The Fast (But Usually Not Good Enough) Way</h2>\r\n\r\n    <p class=\"description\">You can cast raw JSON over to an object with just a simple:</p>\r\n    <pre><code [highlight]=\"'let classObj:TargetClass = (TargetClass) json'\"\r\n               language=\"ts\"></code></pre>\r\n    <p class=\"description\">And this is fine for flat JSON structures or simple object graphs where no type conversion needs to be done. If your model is small and simple, this may be the way you want to do it rather than using the <i>EntityMapper</i>. Once you get into complex types and structures, it gets messy and usually requires a lot of custom code.</p>\r\n    <p class=\"description\">By using the <i>EntityMapper</i> and its associated annotations (see the next section in the menu) you can get away from most of the \"having to deal with getting real objects out of JSON\" and just get on with your life (or code).</p>\r\n    <p class=\"description\">The <i>EntityMapper</i>'s job is to create real \"Entity classes\" from raw JSON data. The result is classes that usually match the ones that exist on a server. And with all the nested entities and complex references and type conversion that may need to be done.</p>\r\n\r\n    <h2>The Short Version (TL;DR / You've been here before)</h2>\r\n    <p class=\"description\"><i>Step 1</i> - Have your entity class implement <i>BaseEntity</i> per:</p>\r\n    <pre><code [highlight]=\"'export class YourClass implements BaseEntity<YourClass> {'\"\r\n               language=\"ts\"></code></pre>\r\n    <br><br>\r\n    <p class=\"description\"><i>Step 2</i> - When you have your JSON structure that you wish to convert, call:</p>\r\n    <pre><code [highlight]=\"'EntityMapper.mapEntityTreeFrom(jsonObjStructure, targetObject, EntityClassToMapTo, this.entityDataService);'\"\r\n               language=\"ts\"></code></pre>\r\n    <p class=\"description\">And the targetObj will then be of the <i>EntityClassToMapTo</i> type.\r\n    <br><br>\r\n      If using the <i>EntityDataService</i> all the mapping will be done for you, and you simply use the data fetching methods with the type parameter (<i>TargetClazz</i> in the below example) for the target object such as:</p>\r\n    <pre><code [highlight]=\"easyRestCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <h2>The Long Version (First time here)</h2>\r\n\r\n    <h3>The BaseEntity class</h3>\r\n    <p class=\"description\">All your entity classes that you wish to be able to automatically build up with the <i>EntityMapper</i> should implement the <i>BaseEntity</i> interface that contains utility methods that are later used by the <i>EntityMapper</i> to help create the entities.</p>\r\n    <p class=\"description\">Here is a simple example class that extends the BaseEntity and includes a method override that creates a local property called _id after the class has been created by the mapper:</p>>\r\n\r\n    <pre><code [highlight]=\"baseEntityCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <p class=\"description\">The example shows the required method overrides. The <i>getClassName</i> override is used when the code is \"javascript minimized\"/optimized in a production build, as the class name will then disappear, and with it; any possibility of referencing it as a type.</p>\r\n    <h3>IMPORTANT - EVERY CLASS PROPERTY MUST BE INITIALIZED</h3>\r\n    <p class=\"description\">It's imperative that you initialize EVERY property in your entity classes with either <i>null</i>, <i>undefined</i>, or with actual values. Lists and Arrays should be empty or null.</p>\r\n    <p class=\"description\" style=\"color: red\">Never initialize a property like this. It will cause any entity mapping to fail:</p>\r\n    <pre><code [highlight]=\"badInitCode\"\r\n               language=\"ts\"></code></pre>\r\n    <p class=\"description\">The reason is, that this property is impossible to see with reflection due to it being un-initialized. If you need your properties to be uninitialized just set them to 'undefined'</p>\r\n    <pre><code [highlight]=\"goodInitCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <h2>The EntityDataService</h2>\r\n\r\n    <p class=\"description\">The <i>EntityMapper</i> is also used together with the <i>EntityDataService</i>. This injectable service includes methods for fetching data over REST. It will call the <i>EntityMapper</i> on the return of all data and convert the JSON data over to objects using the mapper. This is the a simplified way to do it, but you can of course use the mapper completely standalone.</p>\r\n    <p class=\"description\">To inject it, simply include it in your constructor per:</p>\r\n\r\n    <pre><code [highlight]=\"'constructor(private entityMapper: EntityMapper) {'\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <h2>Using the EntityMapper By Itself</h2>\r\n    <p class=\"description\">The base usage is like the example below. You always start the mapping from the root object if your object is a tree of data. Any subsequent entities will be automatically mapped from the root out to the end of every tree.</p>\r\n\r\n    <pre><code [highlight]=\"'EntityMapper.mapEntityFrom(jsonObj, targetObj, EntityClassToMapTo, entityDataService);'\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <p class=\"description\">Let's say our jsonObj is an array of <i>Currency</i> data that matches the example class at the top:</p>\r\n    <pre><code [highlight]=\"currencyCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <p class=\"description\">We know we want any array of <i>Currency</i> entity objects as the result. To map them all we do as follows:</p>\r\n    <pre><code [highlight]=\"currencyMappingCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <h2>Using BaseEntity with Code Generators & Automatically Generated Classes</h2>\r\n    <p class=\"description\">A lot of time you will have your base entities generated by some code generation framework. This causes headaches for changing entities as you cannot modify the class itself without having any changes being overwritten the next tiem the generation is done.\r\n      To get around this, one way to tackle it is to add a post-processing task to your Maven build or whatever you use to build your code.</p>\r\n    <p class=\"description\">Here is an example from an existing project that goes through entities and adds annotations to the generated base classes (in this case, using the Open API generator).</p>\r\n\r\n    <pre><code [highlight]=\"mavenExampleCode\"\r\n               language=\"xml\"></code></pre>\r\n\r\n    <!--\r\n\r\n        <h2>Framework Root Module Initialization</h2>\r\n        <p class=\"description\">To get started with the base framework you need to tell your application (or module / library), to use it and to initialize it. This is done in your module declaration in the import section. Usually in <i>app.module.ts</i>, but you can of course initialize it individually in any lazy loaded module\r\n          as well.\r\n          You initialize the module by telling it some basic things, such as what the default display date format is and you need to provide a class handler that converts class \"string names\" into objects. An Example follows:</p>\r\n\r\n        <h4>Example Initialization</h4>\r\n        <pre><code [highlight]=\"initCode\"\r\n                   language=\"ts\"></code></pre>\r\n\r\n\r\n        <p class=\"description\">So to highlight, the important block here is the <i>SixCoreModule.forRoot()</i>. You can also use <i>forChild()</i> rather than <i>forRoot()</i> for sub-module implementations.</p>\r\n\r\n        <h2>Initializing for testing (Jest/Karma):</h2>\r\n        <p class=\"description\">If you get errors about the module not being instantiated, you may need to provide a custom provider in your \"providers\" set up of your testbed as follows:</p>\r\n\r\n        <pre><code [highlight]=\"testbedCode\"\r\n                   language=\"ts\"></code></pre>\r\n\r\n        <h2>Parameter 1 (Optional) - IEntityClassHandler</h2>\r\n        <p class=\"description\">This parameter is our \"converter\" for classes that tells the entity mapper inside the base framework what \"string class name\" goes to what class object.\r\n\r\n          A \"class handler\" is a very simple dummy class that exports all entity classes that you wish to be mappable from text to object in the following way:</p>\r\n\r\n        <pre><code [highlight]=\"classHandlerCode\"\r\n                   language=\"ts\"></code></pre>\r\n\r\n\r\n        <p class=\"description\">When the EntityMapper then needs a class, it calls your handler that returns a new class cast from the string representation of that class.\r\n\r\n          This can be done in many ways, but if you want each instance to be a new object, the \"simplest\" (with some typescript magic) is to simply cast a new object into the class via:</p>\r\n\r\n        <pre><code [highlight]=\"'return new (<any>clazzHandler)[clazzName]();'\"\r\n                   language=\"ts\"></code></pre>\r\n\r\n        <p></p>\r\n        <p class=\"description\">You can import the <i>clazzHandler</i> (ClassHandler from above) as follows;</p>\r\n\r\n        <pre><code [highlight]=\"importCode\"\r\n                   language=\"ts\"></code></pre>\r\n\r\n        <p class=\"description\">If you hare not planning on using any sort of entity mapping, you can pass <i>null</i> or <i>undefined</i>.</p>\r\n\r\n        <h2>Parameter 2 (Optional) - IBaseFrameworkSettings</h2>\r\n        <p class=\"description\">The second parameter, is your implementation of the <i>IBaseFrameworkSettings</i> interface. This controls settings that are used in the base module and range from how things are displayed to grid specific features. Please look at the interface for further details on possible options, <a\r\n          href=\"https://gitlab.six-group.net/six/angbase/base/-/blob/main/src/app/components/core/src/ext/IBaseFrameworkSettings.ts\">each option is documented in the API.</a></p>\r\n\r\n        <table class=\"doc-table\">\r\n          <thead>\r\n          <tr>\r\n            <th> name</th>\r\n            <th> type</th>\r\n            <th> default</th>\r\n            <th> description</th>\r\n            <th></th>\r\n            <th></th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr *ngFor=\"let item of tableData\">\r\n            <td><span class=\"doc-option-name\" id=\"api.menu.props.model\">{{ item.name }}<a class=\"doc-option-link\"><i class=\"pi pi-link\"></i></a></span></td>\r\n            <td><span class=\"doc-option-type\">{{ item.type }}</span></td>\r\n            <td><span id=\"api.menu.props.default\" class=\"doc-option-light doc-option-default\">{{ item.def }}</span></td>\r\n            <td><span id=\"api.menu.props.description\" class=\"doc-option-description\">{{ item.description }}</span></td>\r\n            <td></td>\r\n            <td></td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n    -->\r\n\r\n  </div>\r\n</div>\r\n","import {AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {BaseView} from \"@six-group/base-angular-framework/core\";\r\n\r\n@Component({\r\n  selector: 'ReverseMappingView',\r\n  templateUrl: './ReverseMappingView.html',\r\n  providers: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ReverseMappingView extends BaseView implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  public backToJsonCode = `let json = this.entityUtilities.prepareForSaving<Clazz>(jsObject);\r\n\r\nthis.someRestService.save(json).subscribe((response: any) => {\r\n...\r\n`;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getEventGrid(id: string): any {\r\n  }\r\n\r\n  hookObservables(): void {\r\n\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  override ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"documentParent\" xmlns=\"http://www.w3.org/1999/html\">\r\n  <div class=\"document\">\r\n    <h1>Converting <i>BaseEntity</i> implementations back to JSON</h1>\r\n    <p class=\"description\">Mapping from JSON to entities is great. But many times we need to send object graphs back to the server as JSON, and this is again where a lot of headaches can happen as you may have back-references which cause infinite loops etc when trying to use the basic <i>JSON.stringify(object)</i>.</p>\r\n    <p class=\"description\">We may also have added \"temporary properties\" that actually don't belong to the object via code, such as <i>obj[\"thisIsNew\"] = \"blah\"</i>, and as they technically didn't exist on the object from the beginning, they should also not be sent back.</p>\r\n    <p class=\"description\">To ensure all of this works as intended, the <i>EntityMapping</i> framework comes with a utility that lets you convert your object structure back to JSON.</p>\r\n    <p class=\"description\">First we inject the <i>EntityUtilities</i> service into our constructor.</p>\r\n\r\n    <pre><code [highlight]=\"'constructor(private entityUtilities: EntityUtilities) {'\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <p class=\"description\">Now we can tell <i>EntityUtilities</i> that we need to convert our object (that implements <i>BaseEntity</i>) back to JSON</p>\r\n\r\n    <pre><code [highlight]=\"backToJsonCode\"\r\n               language=\"ts\"></code></pre>\r\n\r\n    <p class=\"description\">This is a very simple example. The converter takes many optional parameters as well that lets you override properties, do custom conversion before or after. For more details, <a href=\"https://gitlab.six-group.net/six/angbase/root/base/-/blob/main/src/app/components/core/src/services/EntityUtilities.ts\" target=\"_blank\">please read the API documentation for the class</a></p>\r\n\r\n\r\n  </div>\r\n</div>\r\n"],"names":["CommonModule","LocalRouting","EntityMappingUsecaseModel","SharedModule","AgGridModule","EntityMappingView","AnnotationsView","CustomAnnotationsView","ReverseMappingView","EntityMappingModule","imports","declarations","i1","RouterModule","routes","path","component","forChild","BaseUsecaseModel","constructor","errorHelper","destroy","handleInitializionError","err","displayError","hookObservables","i0","ɵɵinject","ErrorHelper","factory","ɵfac","BaseView","ɵɵelementStart","ɵɵtext","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","item_r1","name","usage","attributes","description","other","ɵɵproperty","example","exampleCode","tableData","getEventGrid","id","ngOnInit","ngAfterViewInit","ngOnDestroy","selectors","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","decls","vars","consts","template","AnnotationsView_Template","rf","ctx","ɵɵtemplate","AnnotationsView_tr_32_Template","constuctorCode","sampleUsageCode","sampleRegistrationCode","sampleAnnotationCode","CustomAnnotationsView_Template","easyRestCode","mavenExampleCode","currencyMappingCode","currencyCode","goodInitCode","badInitCode","baseEntityCode","EntityMappingView_Template","backToJsonCode","ReverseMappingView_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}